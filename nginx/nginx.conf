worker_processes  1;

#error_log  logs/error.log debug;
error_log  logs/error.log;

pid        logs/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  logs/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout  65;

  #gzip  on;

  upstream unicorn {
    server unix:/tmp/unicorn.sock;
    #server 127.0.0.1:4567;
  }

  #lua_shared_dict counter 1m;
  #lua_shared_dict cache 1m;

  proxy_cache_path cache levels=1:2 keys_zone=cache1:4m max_size=50m inactive=120m;

  server {
    listen       80;
    server_name  localhost;

    default_type 'text/html';

    #try_files $uri $uri.html $uri/index.html @app;

    location ~ /(js|css) {
      root /home/isucon/webapp/public;
    }

    location /js/jquery-1.10.2.min.map {
      return 404;
    }

    # location = /memo {
    #   proxy_set_header Host $http_host;
    #   proxy_pass http://unicorn;
    # }

    # location / {
    #   lua_code_cache on;
    #   if ($request_method = 'GET') {
    #     content_by_lua_file conf/common.lua;
    #   }
    #   if ($request_method = 'POST') {
    #     rewrite ^/(.*) /app/$1 last;
    #   }
    # }

    location = / {
      lua_code_cache on;
      content_by_lua_file conf/common.lua;
    }

    location /recent {
      lua_code_cache on;
      content_by_lua_file conf/common.lua;
    }

    location / {
      proxy_set_header Host $http_host;
      proxy_pass http://unicorn;
    }

    #location /app/recent {
    #  proxy_cache cache1;
    #  proxy_cache_valid 200 60s;
    #  rewrite /app/(.*) /$1 break;
    #  proxy_set_header Host $http_host;
    #  proxy_pass http://unicorn/$1;
    #}

    location = /app/total_count {
      proxy_cache cache1;
      proxy_cache_valid 200 1s;
      rewrite /app/(.*) /$1 break;
      proxy_set_header Host $http_host;
      proxy_pass http://unicorn/$1;
    }

    location /app {
      rewrite /app/(.*) /$1 break;
      proxy_set_header Host $http_host;
      proxy_pass http://unicorn/$1;
    }
  }
}
